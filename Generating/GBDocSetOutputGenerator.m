//
//  GBDocSetOutputGenerator.m
//  appledoc
//
//  Created by Tomaz Kragelj on 29.11.10.
//  Copyright 2010 Gentle Bytes. All rights reserved.
//

#import "GRMustache.h"
#import "GBApplicationSettingsProvider.h"
#import "GBDataObjects.h"
#import "GBTemplateHandler.h"
#import "GBDocSetOutputGenerator.h"

@interface GBDocSetOutputGenerator ()

- (BOOL)moveSourceFilesToDocuments:(NSError **)error;
- (BOOL)processInfoPlist:(NSError **)error;
- (BOOL)processNodesXml:(NSError **)error;
- (NSArray *)dataObjectsFromObjects:(NSArray *)objects value:(NSString *)value index:(NSUInteger *)index;
- (NSString *)replacePlaceholdersInString:(NSString *)string;

@end

#pragma mark -

@implementation GBDocSetOutputGenerator

#pragma Generation handling

- (BOOL)generateOutputWithStore:(id<GBStoreProviding>)store error:(NSError **)error {
	NSParameterAssert(self.previousGenerator != nil);
	if (![super generateOutputWithStore:store error:error]) return NO;
	if (![self moveSourceFilesToDocuments:error]) return NO;
	if (![self processInfoPlist:error]) return NO;
	if (![self processNodesXml:error]) return NO;
	return YES;
}

- (BOOL)moveSourceFilesToDocuments:(NSError **)error {
	GBLogInfo(@"Moving HTML files to DocSet bundle...");
	
	// Prepare all paths. Note that we determine the exact subdirectory by searching for documents-template and using it's subdirectory as the guide. If documents template wasn't found, exit.
	NSString *sourceFilesPath = [self.previousGenerator.outputUserPath stringByStandardizingPath];
	NSString *documentsPath = [self templateFileKeyEndingWith:@"documents-template"];
	if (!documentsPath) {
		if (error) *error = [NSError errorWithCode:1 description:@"Documents template is missing!" reason:@"documents-template file is required to determine location for Documents path in DocSet bundle!"];
		GBLogWarn(@"Failed finding documents-template in '%@'!", self.templateUserPath);
		return NO;
	}
	
	// First step is to move all files generated by previous generator as the Documents subfolder of docset structure.
	documentsPath = [documentsPath stringByDeletingLastPathComponent];
	NSString *destPath = [self.outputUserPath stringByAppendingPathComponent:documentsPath];
	NSString *movePath = [destPath stringByAppendingPathComponent:@"Documents"];
	if (![self.fileManager moveItemAtPath:sourceFilesPath toPath:[movePath stringByStandardizingPath] error:error]) {
		GBLogWarn(@"Failed moving files from '%@' to '%@'!", self.previousGenerator.outputUserPath, movePath);
		return NO;
	}
	return YES;
}

- (BOOL)processInfoPlist:(NSError **)error {
	GBLogInfo(@"Writting DocSet Info.plist...");
	NSString *templatePath = [self templateFileKeyEndingWith:@"info-template.plist"];
	if (!templatePath) {
		if (error) *error = [NSError errorWithCode:2 description:@"Info.plist template is missing!" reason:@"info-template.plist file is required to specify information about DocSet!"];
		GBLogWarn(@"Failed finding info-template.plist in '%@'!", self.templateUserPath);
		return NO;
	}
	
	// Prepare template variables and replace all placeholders with actual values.
	NSMutableDictionary *vars = [NSMutableDictionary dictionaryWithCapacity:20];
	[vars setObject:[self replacePlaceholdersInString:self.settings.docsetBundleIdentifier] forKey:@"bundleIdentifier"];
	[vars setObject:[self replacePlaceholdersInString:self.settings.docsetBundleName] forKey:@"bundleName"];
	[vars setObject:[self replacePlaceholdersInString:self.settings.docsetCertificateIssuer] forKey:@"certificateIssuer"];
	[vars setObject:[self replacePlaceholdersInString:self.settings.docsetCertificateSigner] forKey:@"certificateSigner"];
	[vars setObject:[self replacePlaceholdersInString:self.settings.docsetDescription] forKey:@"description"];
	[vars setObject:[self replacePlaceholdersInString:self.settings.docsetFallbackURL] forKey:@"fallbackURL"];
	[vars setObject:[self replacePlaceholdersInString:self.settings.docsetFeedName] forKey:@"feedName"];
	[vars setObject:[self replacePlaceholdersInString:self.settings.docsetFeedURL] forKey:@"feedURL"];
	[vars setObject:[self replacePlaceholdersInString:self.settings.docsetMinimumXcodeVersion] forKey:@"minimumXcodeVersion"];
	[vars setObject:[self replacePlaceholdersInString:self.settings.docsetPlatformFamily] forKey:@"platformFamily"];
	[vars setObject:[self replacePlaceholdersInString:self.settings.docsetPublisherIdentifier] forKey:@"publisherIdentifier"];
	[vars setObject:[self replacePlaceholdersInString:self.settings.docsetPublisherName] forKey:@"publisherName"];
	[vars setObject:[self replacePlaceholdersInString:self.settings.docsetCopyrightMessage] forKey:@"copyrightMessage"];
	
	// Run the template and save the results as Info.plist.
	GBTemplateHandler *handler = [self.templateFiles objectForKey:templatePath];
	NSString *output = [handler renderObject:vars];
	NSString *path = [[templatePath stringByDeletingLastPathComponent] stringByAppendingPathComponent:@"Info.plist"];
	NSString *filename = [self.outputUserPath stringByAppendingPathComponent:path];
	if (![self writeString:output toFile:[filename stringByStandardizingPath] error:error]) {
		GBLogWarn(@"Failed writting Info.plist to '%@'!", filename);
		return NO;
	}
	return YES;
}

- (BOOL)processNodesXml:(NSError **)error {
	GBLogInfo(@"Writting DocSet Nodex.xml file...");
	NSString *templatePath = [self templateFileKeyEndingWith:@"nodes-template.xml"];
	if (!templatePath) {
		if (error) *error = [NSError errorWithCode:2 description:@"Nodes.xml template is missing!" reason:@"nodes-template.xml file is required to specify document structure for DocSet!"];
		GBLogWarn(@"Failed finding nodes-template.xml in '%@'!", self.templateUserPath);
		return NO;
	}
	
	// Prepare flat list of objects for library nodes.
	NSUInteger index = 1;
	NSArray *classes = [self dataObjectsFromObjects:[self.store classesSortedByName] value:@"nameOfClass" index:&index];
	NSArray *categories = [self dataObjectsFromObjects:[self.store categoriesSortedByName] value:@"idOfCategory" index:&index];
	NSArray *protocols = [self dataObjectsFromObjects:[self.store protocolsSortedByName] value:@"nameOfProtocol" index:&index];
	
	// Prepare the variables for the template.
	NSMutableDictionary *vars = [NSMutableDictionary dictionary];
	[vars setObject:self.settings.projectName forKey:@"projectName"];
	[vars setObject:@"index.html" forKey:@"indexFilename"];
	[vars setObject:([classes count] > 0) ? [GRYes yes] : [GRNo no] forKey:@"hasClasses"];
	[vars setObject:([categories count] > 0) ? [GRYes yes] : [GRNo no] forKey:@"hasCategories"];
	[vars setObject:([protocols count] > 0) ? [GRYes yes] : [GRNo no] forKey:@"hasProtocols"];
	[vars setObject:classes forKey:@"classes"];
	[vars setObject:categories forKey:@"categories"];
	[vars setObject:protocols forKey:@"protocols"];
	[vars setObject:self.settings.stringTemplates forKey:@"strings"];
	
	// Run the template and save the results as Info.plist.
	GBTemplateHandler *handler = [self.templateFiles objectForKey:templatePath];
	NSString *output = [handler renderObject:vars];
	NSString *path = [[templatePath stringByDeletingLastPathComponent] stringByAppendingPathComponent:@"Nodes.xml"];
	NSString *filename = [self.outputUserPath stringByAppendingPathComponent:path];
	if (![self writeString:output toFile:[filename stringByStandardizingPath] error:error]) {
		GBLogWarn(@"Failed writting Nodes.xml to '%@'!", filename);
		return NO;
	}
	return YES;
}

- (NSArray *)dataObjectsFromObjects:(NSArray *)objects value:(NSString *)value index:(NSUInteger *)index {
	NSUInteger idx = *index;
	NSMutableArray *result = [NSMutableArray arrayWithCapacity:[objects count]];
	for (id object in objects) {
		NSMutableDictionary *data = [NSMutableDictionary dictionaryWithCapacity:3];
		[data setObject:[NSString stringWithFormat:@"%ld", idx++] forKey:@"id"];
		[data setObject:[object valueForKey:value] forKey:@"name"];
		[data setObject:[self.settings htmlReferenceForObjectFromIndex:object] forKey:@"path"];
		[result addObject:data];
	}
	*index = idx;
	return result;
}

#pragma mark Helper methods

- (NSString *)replacePlaceholdersInString:(NSString *)string {
	string = [string stringByReplacingOccurrencesOfString:@"$PROJECT" withString:self.settings.projectName];
	string = [string stringByReplacingOccurrencesOfString:@"$COMPANY" withString:self.settings.projectCompany];
	string = [string stringByReplacingOccurrencesOfString:@"$YEAR" withString:[self.settings yearStringFromDate:[NSDate date]]];
	string = [string stringByReplacingOccurrencesOfString:@"$UPDATEDATE" withString:[self.settings yearToDayStringFromDate:[NSDate date]]];
	return string;
}

#pragma mark Overriden methods

- (NSString *)outputSubpath {
	return @"docset";
}

@end
