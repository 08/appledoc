//
//  DoxygenConverter+CleanXML.h
//  objcdoc
//
//  Created by Tomaz Kragelj on 17.4.09.
//  Copyright 2009 Tomaz Kragelj. All rights reserved.
//

#import <Foundation/Foundation.h>
#import "DoxygenConverter.h"

//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
/** Implements clean XML documentation related functionality for @c DoxygenConverter 
class.

￼￼This category handles conversion from doxygen created XML files to clean XML. It's
members create clean XML object and index files, fix the links and save the new files
in the proper directory structure.
*/
@interface DoxygenConverter (CleanXML)

//////////////////////////////////////////////////////////////////////////////////////////
/// @name Clean XML handling
//////////////////////////////////////////////////////////////////////////////////////////

/** Creates clean object XML markups.￼

This method will scan the doxygen XML output. For each file it will check if it contains
a known object (by testing the file name) and that the file is documented. For each
known documented file, it will add the original markup in the form of the @c NSXMLParser
to the @c data dictionary. The key of the dictionary will be the name of the described
object.
 
Note that this method will not save the clean XML file yet, it will only prepare the
proper name including full path and will add all the data, including cleaned XML tree
into the database. Until the utility finishes working, it will work on in-memory XML
representation and only save after all steps are finished.

This message is automaticaly sent from @c DoxygenConverter::convert() in the proper order.
See also @c createCleanIndexDocumentationFile(), @c fixCleanObjectDocumentationLinks()
and @c saveCleanObjectDocumentationFiles().

@exception ￼￼￼￼￼NSException Thrown if convertion fails.
*/
- (void) createCleanObjectDocumentationMarkup;

/** Creates clean index XML file.￼

This method will use the data generated by the @c createCleanObjectDocumentationMarkup() and will
create the index file, so it is required that @c createCleanObjectDocumentationMarkup() is sent
to the received before sending this message!

This message is automaticaly sent from @c DoxygenConverter::convert() in the proper order.
See also @c createCleanObjectDocumentationMarkup(), @c fixCleanObjectDocumentationLinks()
and @c saveCleanObjectDocumentationFiles().

@exception ￼￼￼￼￼NSException Thrown if index file creation fails.
*/
- (void) createCleanIndexDocumentationFile;

/** Fixes the clean object XML documentation.￼

This method will scan through all XML files generated in @c createCleanObjectDocumentationMarkup()
and will fix all things cannot be (easily) treated by the xslt. Note that this method
will not do any fixing or convertion itself. Instead it will scan through all documented
objects and will pass each one to the "child" methods that will do the actual work. The
methods that get called are:
- @c fixInheritanceForObject:objectData:objects:().
- @c fixReferencesForObject:objectData:objects:().
- @c fixParaLinksForObject:objectData:objects:().
- @c fixEmptyParaForObject:objectData:objects:().
 
This message is automaticaly sent from @c DoxygenConverter::convert() in the proper order.
See also @c createCleanObjectDocumentationMarkup(), @c createCleanIndexDocumentationFile()
and @c saveCleanObjectDocumentationFiles().

@exception ￼￼￼￼￼NSException Thrown if fixing XML fails.
*/
- (void) fixCleanObjectDocumentation;

/** Saved clean object XML markups to proper files.￼

This method will save all clean XML markups in the database to proper files.
 
This message is automaticaly sent from @c DoxygenConverter::convert() in the proper order.
See also @c createCleanObjectDocumentationMarkup(), @c createCleanIndexDocumentationFile()
and @c fixCleanObjectDocumentationLinks().

@exception ￼￼￼￼￼NSException Thrown if saving fails.
*/
- (void) saveCleanObjectDocumentationFiles;

//////////////////////////////////////////////////////////////////////////////////////////
/// @name Clean XML "makeup" handling
//////////////////////////////////////////////////////////////////////////////////////////

/** Fixes inheritance links for the given object.

This fixes base class and protocols links. If the base class or protocol is one of the 
known objects, the link reference is added to the clean document. Additionally, all
protocol @c <base> nodes are renamed to @c <conforms> so that the html creation is
easier later on.
 
This message is sent automatically from @c fixCleanObjectDocumentation() and should not
be sent otherwise. It is used to simplify otherwise large and difficult to manage parent
method.

@param objectName ￼￼￼￼￼￼The name of the object that should be fixed.
@param objectData ￼￼￼￼￼￼The data of the object that should be fixed.
@param objects The dictionary of all objects.
@exception ￼￼￼￼￼NSException Thrown if fixing fails.
*/
- (void) fixInheritanceForObject:(NSString*) objectName
					  objectData:(NSMutableDictionary*) objectData
						 objects:(NSDictionary*) objects;

/** Fixes doxygen references links for the given object.

This updates all doxygen created references specified by @c <ref> tag so that their
reference points to the correct file and/or member. The result is that all @c <ref>
nodes now have correct references prepared for the html generation later on.
 
This message is sent automatically from @c fixCleanObjectDocumentation() and should not
be sent otherwise. It is used to simplify otherwise large and difficult to manage parent
method.

@param objectName ￼￼￼￼￼￼The name of the object that should be fixed.
@param objectData ￼￼￼￼￼￼The data of the object that should be fixed.
@param objects The dictionary of all objects.
@exception ￼￼￼￼￼NSException Thrown if fixing fails.
*/
- (void) fixReferencesForObject:(NSString*) objectName
					 objectData:(NSMutableDictionary*) objectData
						objects:(NSDictionary*) objects;

/** Fixes all objective-c links ignored by doxygen for the given object.

This will actually check all description paragraphs and scan word by word to see if a
known object is being addressed. If so, it will convert the word to the proper @c <ref>
tag. Therefore all links to classes, protocols and categories are properly handled.
 
In addition, the code will also convert any word that starts with @c :: or ends with @c ()
to a @c <ref> for the given member. The code will not check if a member with that name
exists or not though, so some care needs to be taken when documenting code...
 
This message is sent automatically from @c fixCleanObjectDocumentation() and should not
be sent otherwise. It is used to simplify otherwise large and difficult to manage parent
method.

@param objectName ￼￼￼￼￼￼The name of the object that should be fixed.
@param objectData ￼￼￼￼￼￼The data of the object that should be fixed.
@param objects The dictionary of all objects.
@exception ￼￼￼￼￼NSException Thrown if fixing fails.
*/
- (void) fixParaLinksForObject:(NSString*) objectName
					objectData:(NSMutableDictionary*) objectData
					   objects:(NSDictionary*) objects;

/** Fixes all empty paragraphs in the documentation for the given object.

Doxygen leaves some paragraphs with only spaces inside. We will delete all such "hanging"
paragraps to get nicer looking documentation.
 
This message is sent automatically from @c fixCleanObjectDocumentation() and should not
be sent otherwise. It is used to simplify otherwise large and difficult to manage parent
method.

@param objectName ￼￼￼￼￼￼The name of the object that should be fixed.
@param objectData ￼￼￼￼￼￼The data of the object that should be fixed.
@param objects The dictionary of all objects.
@exception ￼￼￼￼￼NSException Thrown if fixing fails.
*/
- (void) fixEmptyParaForObject:(NSString*) objectName
					objectData:(NSMutableDictionary*) objectData
					   objects:(NSDictionary*) objects;

//////////////////////////////////////////////////////////////////////////////////////////
/// @name Helper methods
//////////////////////////////////////////////////////////////////////////////////////////

/** Prepares the link to the given destination object.￼

The link is prepared for the given @c source object's reference to the given @c destination
object. If the two objects are found in the same subdirectory, the destination file name
is returned. Otherwise the relative link to the destination's file is returned. The
returned link already contains the required html extension.

@param source ￼￼￼￼￼￼The object which is reffering to @c destination objecy.
@param destination ￼￼￼￼￼￼The object to which the @c object is reffering.
@return ￼￼￼￼Returns the required link, including relative path if necessary.
*/
- (NSString*) objectReferenceFromObject:(NSString*) source 
							   toObject:(NSString*) destination;

@end
